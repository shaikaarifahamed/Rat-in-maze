import java.util.Scanner;
import java.util.Random;

public class PuzzleSolver {

    static final char WALL = '|';
    static final char OPEN_SPACE = 'o';
    static final char START = 'S';
    static final char END = 'E';
    static final char PATH = '0';

    private char[][] puzzle;
    private int puzzleSize;
    private int startRow, startCol;
    private int endRow, endCol;

    public PuzzleSolver(int size) {
        this.puzzleSize = size;
        this.puzzle = new char[size][size];
        initializePuzzle();
    }

    private void initializePuzzle() {
        for (int i = 0; i < puzzleSize; i++) {
            for (int j = 0; j < puzzleSize; j++) {
                puzzle[i][j] = OPEN_SPACE;
            }
        }

        startRow = 0;
        startCol = 0;
        endRow = puzzleSize - 1;
        endCol = puzzleSize - 1;

        puzzle[startRow][startCol] = START;
        puzzle[endRow][endCol] = END;

        addRandomWalls();
    }

    private void addRandomWalls() {
        Random rand = new Random();
        int maxWalls = (int) (puzzleSize * puzzleSize * 0.25);
        int wallCount = 0;

        while (wallCount < maxWalls) {
            int row = rand.nextInt(puzzleSize);
            int col = rand.nextInt(puzzleSize);

            if (!(row == startRow && col == startCol) && !(row == endRow && col == endCol) && puzzle[row][col] != WALL) {
                puzzle[row][col] = WALL;
                wallCount++;
            }
        }
    }

    private void printPuzzle() {
        System.out.println("+---".repeat(puzzleSize) + "+");
        for (int i = 0; i < puzzleSize; i++) {
            for (int j = 0; j < puzzleSize; j++) {
                System.out.print("| " + getCellSymbol(puzzle[i][j]) + " ");
            }
            System.out.println("|");
            System.out.println("+---".repeat(puzzleSize) + "+");
        }
    }

    private char getCellSymbol(char cell) {
        switch (cell) {
            case START:
                return 'S';
            case END:
                return 'E';
            case WALL:
                return '|';
            case OPEN_SPACE:
                return 'o';
            case PATH:
                return '0';
            default:
                return cell;
        }
    }

    private boolean solvePuzzle(int row, int col) {
        if (row < 0 || row >= puzzleSize || col < 0 || col >= puzzleSize || puzzle[row][col] == WALL || puzzle[row][col] == PATH) {
            return false;
        }

        if (row == endRow && col == endCol) {
            return true;
        }

        puzzle[row][col] = PATH;

        // Recursively explore neighboring cells
        if (solvePuzzle(row - 1, col) || solvePuzzle(row + 1, col) || solvePuzzle(row, col - 1) || solvePuzzle(row, col + 1)) {
            return true;
        }

        puzzle[row][col] = OPEN_SPACE;
        return false;
    }

    private void printSolution() {
        boolean solutionFound = solvePuzzle(startRow, startCol);
        if (solutionFound) {
            System.out.println("Solution:");
            printPuzzle();
        } else {
            System.out.println("No solution found.");
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int size;
        PuzzleSolver puzzleSolver = null;

        do {
            System.out.print("Enter the size of the puzzle (n x n): ");
            size = scanner.nextInt();
        } while (size <= 0);

        puzzleSolver = new PuzzleSolver(size);
        System.out.println("Generated Puzzle: ");
        puzzleSolver.printPuzzle();

        int option;
        do {
            System.out.println("1. Print the Solution");
            System.out.println("2. Generate Another Puzzle");
            System.out.println("3. Exit the Game ");
            System.out.print("Enter the choice (1/2/3): ");
            option = scanner.nextInt();

            switch (option) {
                case 1:
                    puzzleSolver.printSolution();
                    break;
                case 2:
                    do {
                        System.out.print("Enter the size of the puzzle (n x n): ");
                        size = scanner.nextInt();
                    } while (size <= 0);
                    puzzleSolver = new PuzzleSolver(size);
                    System.out.println("Generated Puzzle: ");
                    puzzleSolver.printPuzzle();
                    break;
                case 3:
                    break;
            }

        } while (option != 3);

        // Ask for the size of the puzzle after exiting the loop
        System.out.print("Enter the size of the puzzle (n x n): ");
        size = scanner.nextInt();
        puzzleSolver = new PuzzleSolver(size);
        System.out.println("Generated Puzzle: ");
        puzzleSolver.printPuzzle();

        scanner.close();
    }
}
